// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/baggageclaim"
)

type FakeClient struct {
	CreateCOWVolumeStub        func(volumeSpec baggageclaim.VolumeSpec) (baggageclaim.Volume, error)
	createCOWVolumeMutex       sync.RWMutex
	createCOWVolumeArgsForCall []struct {
		volumeSpec baggageclaim.VolumeSpec
	}
	createCOWVolumeReturns struct {
		result1 baggageclaim.Volume
		result2 error
	}
	CreateEmptyVolumeStub        func(volumeSpec baggageclaim.VolumeSpec) (baggageclaim.Volume, error)
	createEmptyVolumeMutex       sync.RWMutex
	createEmptyVolumeArgsForCall []struct {
		volumeSpec baggageclaim.VolumeSpec
	}
	createEmptyVolumeReturns struct {
		result1 baggageclaim.Volume
		result2 error
	}
	FindVolumesStub        func(properties baggageclaim.VolumeProperties) (baggageclaim.Volumes, error)
	findVolumesMutex       sync.RWMutex
	findVolumesArgsForCall []struct {
		properties baggageclaim.VolumeProperties
	}
	findVolumesReturns struct {
		result1 baggageclaim.Volumes
		result2 error
	}
	GetVolumesStub        func() (baggageclaim.Volumes, error)
	getVolumesMutex       sync.RWMutex
	getVolumesArgsForCall []struct{}
	getVolumesReturns     struct {
		result1 baggageclaim.Volumes
		result2 error
	}
	GetVolumeStub        func(handle string) (baggageclaim.Volume, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		handle string
	}
	getVolumeReturns struct {
		result1 baggageclaim.Volume
		result2 error
	}
	SetTTLStub        func(handle string, ttl uint) error
	setTTLMutex       sync.RWMutex
	setTTLArgsForCall []struct {
		handle string
		ttl    uint
	}
	setTTLReturns struct {
		result1 error
	}
	SetPropertyStub        func(handle string, propertyName string, propertyValue string) error
	setPropertyMutex       sync.RWMutex
	setPropertyArgsForCall []struct {
		handle        string
		propertyName  string
		propertyValue string
	}
	setPropertyReturns struct {
		result1 error
	}
}

func (fake *FakeClient) CreateCOWVolume(volumeSpec baggageclaim.VolumeSpec) (baggageclaim.Volume, error) {
	fake.createCOWVolumeMutex.Lock()
	fake.createCOWVolumeArgsForCall = append(fake.createCOWVolumeArgsForCall, struct {
		volumeSpec baggageclaim.VolumeSpec
	}{volumeSpec})
	fake.createCOWVolumeMutex.Unlock()
	if fake.CreateCOWVolumeStub != nil {
		return fake.CreateCOWVolumeStub(volumeSpec)
	} else {
		return fake.createCOWVolumeReturns.result1, fake.createCOWVolumeReturns.result2
	}
}

func (fake *FakeClient) CreateCOWVolumeCallCount() int {
	fake.createCOWVolumeMutex.RLock()
	defer fake.createCOWVolumeMutex.RUnlock()
	return len(fake.createCOWVolumeArgsForCall)
}

func (fake *FakeClient) CreateCOWVolumeArgsForCall(i int) baggageclaim.VolumeSpec {
	fake.createCOWVolumeMutex.RLock()
	defer fake.createCOWVolumeMutex.RUnlock()
	return fake.createCOWVolumeArgsForCall[i].volumeSpec
}

func (fake *FakeClient) CreateCOWVolumeReturns(result1 baggageclaim.Volume, result2 error) {
	fake.CreateCOWVolumeStub = nil
	fake.createCOWVolumeReturns = struct {
		result1 baggageclaim.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateEmptyVolume(volumeSpec baggageclaim.VolumeSpec) (baggageclaim.Volume, error) {
	fake.createEmptyVolumeMutex.Lock()
	fake.createEmptyVolumeArgsForCall = append(fake.createEmptyVolumeArgsForCall, struct {
		volumeSpec baggageclaim.VolumeSpec
	}{volumeSpec})
	fake.createEmptyVolumeMutex.Unlock()
	if fake.CreateEmptyVolumeStub != nil {
		return fake.CreateEmptyVolumeStub(volumeSpec)
	} else {
		return fake.createEmptyVolumeReturns.result1, fake.createEmptyVolumeReturns.result2
	}
}

func (fake *FakeClient) CreateEmptyVolumeCallCount() int {
	fake.createEmptyVolumeMutex.RLock()
	defer fake.createEmptyVolumeMutex.RUnlock()
	return len(fake.createEmptyVolumeArgsForCall)
}

func (fake *FakeClient) CreateEmptyVolumeArgsForCall(i int) baggageclaim.VolumeSpec {
	fake.createEmptyVolumeMutex.RLock()
	defer fake.createEmptyVolumeMutex.RUnlock()
	return fake.createEmptyVolumeArgsForCall[i].volumeSpec
}

func (fake *FakeClient) CreateEmptyVolumeReturns(result1 baggageclaim.Volume, result2 error) {
	fake.CreateEmptyVolumeStub = nil
	fake.createEmptyVolumeReturns = struct {
		result1 baggageclaim.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) FindVolumes(properties baggageclaim.VolumeProperties) (baggageclaim.Volumes, error) {
	fake.findVolumesMutex.Lock()
	fake.findVolumesArgsForCall = append(fake.findVolumesArgsForCall, struct {
		properties baggageclaim.VolumeProperties
	}{properties})
	fake.findVolumesMutex.Unlock()
	if fake.FindVolumesStub != nil {
		return fake.FindVolumesStub(properties)
	} else {
		return fake.findVolumesReturns.result1, fake.findVolumesReturns.result2
	}
}

func (fake *FakeClient) FindVolumesCallCount() int {
	fake.findVolumesMutex.RLock()
	defer fake.findVolumesMutex.RUnlock()
	return len(fake.findVolumesArgsForCall)
}

func (fake *FakeClient) FindVolumesArgsForCall(i int) baggageclaim.VolumeProperties {
	fake.findVolumesMutex.RLock()
	defer fake.findVolumesMutex.RUnlock()
	return fake.findVolumesArgsForCall[i].properties
}

func (fake *FakeClient) FindVolumesReturns(result1 baggageclaim.Volumes, result2 error) {
	fake.FindVolumesStub = nil
	fake.findVolumesReturns = struct {
		result1 baggageclaim.Volumes
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVolumes() (baggageclaim.Volumes, error) {
	fake.getVolumesMutex.Lock()
	fake.getVolumesArgsForCall = append(fake.getVolumesArgsForCall, struct{}{})
	fake.getVolumesMutex.Unlock()
	if fake.GetVolumesStub != nil {
		return fake.GetVolumesStub()
	} else {
		return fake.getVolumesReturns.result1, fake.getVolumesReturns.result2
	}
}

func (fake *FakeClient) GetVolumesCallCount() int {
	fake.getVolumesMutex.RLock()
	defer fake.getVolumesMutex.RUnlock()
	return len(fake.getVolumesArgsForCall)
}

func (fake *FakeClient) GetVolumesReturns(result1 baggageclaim.Volumes, result2 error) {
	fake.GetVolumesStub = nil
	fake.getVolumesReturns = struct {
		result1 baggageclaim.Volumes
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetVolume(handle string) (baggageclaim.Volume, error) {
	fake.getVolumeMutex.Lock()
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		handle string
	}{handle})
	fake.getVolumeMutex.Unlock()
	if fake.GetVolumeStub != nil {
		return fake.GetVolumeStub(handle)
	} else {
		return fake.getVolumeReturns.result1, fake.getVolumeReturns.result2
	}
}

func (fake *FakeClient) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeClient) GetVolumeArgsForCall(i int) string {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return fake.getVolumeArgsForCall[i].handle
}

func (fake *FakeClient) GetVolumeReturns(result1 baggageclaim.Volume, result2 error) {
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 baggageclaim.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SetTTL(handle string, ttl uint) error {
	fake.setTTLMutex.Lock()
	fake.setTTLArgsForCall = append(fake.setTTLArgsForCall, struct {
		handle string
		ttl    uint
	}{handle, ttl})
	fake.setTTLMutex.Unlock()
	if fake.SetTTLStub != nil {
		return fake.SetTTLStub(handle, ttl)
	} else {
		return fake.setTTLReturns.result1
	}
}

func (fake *FakeClient) SetTTLCallCount() int {
	fake.setTTLMutex.RLock()
	defer fake.setTTLMutex.RUnlock()
	return len(fake.setTTLArgsForCall)
}

func (fake *FakeClient) SetTTLArgsForCall(i int) (string, uint) {
	fake.setTTLMutex.RLock()
	defer fake.setTTLMutex.RUnlock()
	return fake.setTTLArgsForCall[i].handle, fake.setTTLArgsForCall[i].ttl
}

func (fake *FakeClient) SetTTLReturns(result1 error) {
	fake.SetTTLStub = nil
	fake.setTTLReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) SetProperty(handle string, propertyName string, propertyValue string) error {
	fake.setPropertyMutex.Lock()
	fake.setPropertyArgsForCall = append(fake.setPropertyArgsForCall, struct {
		handle        string
		propertyName  string
		propertyValue string
	}{handle, propertyName, propertyValue})
	fake.setPropertyMutex.Unlock()
	if fake.SetPropertyStub != nil {
		return fake.SetPropertyStub(handle, propertyName, propertyValue)
	} else {
		return fake.setPropertyReturns.result1
	}
}

func (fake *FakeClient) SetPropertyCallCount() int {
	fake.setPropertyMutex.RLock()
	defer fake.setPropertyMutex.RUnlock()
	return len(fake.setPropertyArgsForCall)
}

func (fake *FakeClient) SetPropertyArgsForCall(i int) (string, string, string) {
	fake.setPropertyMutex.RLock()
	defer fake.setPropertyMutex.RUnlock()
	return fake.setPropertyArgsForCall[i].handle, fake.setPropertyArgsForCall[i].propertyName, fake.setPropertyArgsForCall[i].propertyValue
}

func (fake *FakeClient) SetPropertyReturns(result1 error) {
	fake.SetPropertyStub = nil
	fake.setPropertyReturns = struct {
		result1 error
	}{result1}
}

var _ baggageclaim.Client = new(FakeClient)
