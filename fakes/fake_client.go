// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/baggageclaim"
)

type FakeClient struct {
	CreateVolumeStub        func(baggageclaim.VolumeSpec) (baggageclaim.Volume, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 baggageclaim.VolumeSpec
	}
	createVolumeReturns struct {
		result1 baggageclaim.Volume
		result2 error
	}
	ListVolumesStub        func(properties baggageclaim.VolumeProperties) (baggageclaim.Volumes, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct {
		properties baggageclaim.VolumeProperties
	}
	listVolumesReturns struct {
		result1 baggageclaim.Volumes
		result2 error
	}
	LookupVolumeStub        func(handle string) (baggageclaim.Volume, error)
	lookupVolumeMutex       sync.RWMutex
	lookupVolumeArgsForCall []struct {
		handle string
	}
	lookupVolumeReturns struct {
		result1 baggageclaim.Volume
		result2 error
	}
}

func (fake *FakeClient) CreateVolume(arg1 baggageclaim.VolumeSpec) (baggageclaim.Volume, error) {
	fake.createVolumeMutex.Lock()
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 baggageclaim.VolumeSpec
	}{arg1})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(arg1)
	} else {
		return fake.createVolumeReturns.result1, fake.createVolumeReturns.result2
	}
}

func (fake *FakeClient) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeClient) CreateVolumeArgsForCall(i int) baggageclaim.VolumeSpec {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return fake.createVolumeArgsForCall[i].arg1
}

func (fake *FakeClient) CreateVolumeReturns(result1 baggageclaim.Volume, result2 error) {
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 baggageclaim.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListVolumes(properties baggageclaim.VolumeProperties) (baggageclaim.Volumes, error) {
	fake.listVolumesMutex.Lock()
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct {
		properties baggageclaim.VolumeProperties
	}{properties})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub(properties)
	} else {
		return fake.listVolumesReturns.result1, fake.listVolumesReturns.result2
	}
}

func (fake *FakeClient) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeClient) ListVolumesArgsForCall(i int) baggageclaim.VolumeProperties {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return fake.listVolumesArgsForCall[i].properties
}

func (fake *FakeClient) ListVolumesReturns(result1 baggageclaim.Volumes, result2 error) {
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 baggageclaim.Volumes
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) LookupVolume(handle string) (baggageclaim.Volume, error) {
	fake.lookupVolumeMutex.Lock()
	fake.lookupVolumeArgsForCall = append(fake.lookupVolumeArgsForCall, struct {
		handle string
	}{handle})
	fake.lookupVolumeMutex.Unlock()
	if fake.LookupVolumeStub != nil {
		return fake.LookupVolumeStub(handle)
	} else {
		return fake.lookupVolumeReturns.result1, fake.lookupVolumeReturns.result2
	}
}

func (fake *FakeClient) LookupVolumeCallCount() int {
	fake.lookupVolumeMutex.RLock()
	defer fake.lookupVolumeMutex.RUnlock()
	return len(fake.lookupVolumeArgsForCall)
}

func (fake *FakeClient) LookupVolumeArgsForCall(i int) string {
	fake.lookupVolumeMutex.RLock()
	defer fake.lookupVolumeMutex.RUnlock()
	return fake.lookupVolumeArgsForCall[i].handle
}

func (fake *FakeClient) LookupVolumeReturns(result1 baggageclaim.Volume, result2 error) {
	fake.LookupVolumeStub = nil
	fake.lookupVolumeReturns = struct {
		result1 baggageclaim.Volume
		result2 error
	}{result1, result2}
}

var _ baggageclaim.Client = new(FakeClient)
