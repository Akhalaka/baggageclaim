// This file was generated by counterfeiter
package fake_namespacer

import (
	"sync"

	"github.com/concourse/baggageclaim/uidjunk"
)

type FakeNamespacer struct {
	CacheKeyStub        func() string
	cacheKeyMutex       sync.RWMutex
	cacheKeyArgsForCall []struct{}
	cacheKeyReturns     struct {
		result1 string
	}
	NamespacePathStub        func(rootfsPath string) error
	namespacePathMutex       sync.RWMutex
	namespacePathArgsForCall []struct {
		rootfsPath string
	}
	namespacePathReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespacer) CacheKey() string {
	fake.cacheKeyMutex.Lock()
	fake.cacheKeyArgsForCall = append(fake.cacheKeyArgsForCall, struct{}{})
	fake.recordInvocation("CacheKey", []interface{}{})
	fake.cacheKeyMutex.Unlock()
	if fake.CacheKeyStub != nil {
		return fake.CacheKeyStub()
	} else {
		return fake.cacheKeyReturns.result1
	}
}

func (fake *FakeNamespacer) CacheKeyCallCount() int {
	fake.cacheKeyMutex.RLock()
	defer fake.cacheKeyMutex.RUnlock()
	return len(fake.cacheKeyArgsForCall)
}

func (fake *FakeNamespacer) CacheKeyReturns(result1 string) {
	fake.CacheKeyStub = nil
	fake.cacheKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNamespacer) NamespacePath(rootfsPath string) error {
	fake.namespacePathMutex.Lock()
	fake.namespacePathArgsForCall = append(fake.namespacePathArgsForCall, struct {
		rootfsPath string
	}{rootfsPath})
	fake.recordInvocation("NamespacePath", []interface{}{rootfsPath})
	fake.namespacePathMutex.Unlock()
	if fake.NamespacePathStub != nil {
		return fake.NamespacePathStub(rootfsPath)
	} else {
		return fake.namespacePathReturns.result1
	}
}

func (fake *FakeNamespacer) NamespacePathCallCount() int {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return len(fake.namespacePathArgsForCall)
}

func (fake *FakeNamespacer) NamespacePathArgsForCall(i int) string {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return fake.namespacePathArgsForCall[i].rootfsPath
}

func (fake *FakeNamespacer) NamespacePathReturns(result1 error) {
	fake.NamespacePathStub = nil
	fake.namespacePathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cacheKeyMutex.RLock()
	defer fake.cacheKeyMutex.RUnlock()
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNamespacer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uidjunk.Namespacer = new(FakeNamespacer)
