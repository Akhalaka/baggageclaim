// Code generated by counterfeiter. DO NOT EDIT.
package uidgidfakes

import (
	"os/exec"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/baggageclaim/uidgid"
)

type FakeNamespacer struct {
	NamespacePathStub        func(logger lager.Logger, path string) error
	namespacePathMutex       sync.RWMutex
	namespacePathArgsForCall []struct {
		logger lager.Logger
		path   string
	}
	namespacePathReturns struct {
		result1 error
	}
	namespacePathReturnsOnCall map[int]struct {
		result1 error
	}
	NamespaceCommandStub        func(cmd *exec.Cmd)
	namespaceCommandMutex       sync.RWMutex
	namespaceCommandArgsForCall []struct {
		cmd *exec.Cmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespacer) NamespacePath(logger lager.Logger, path string) error {
	fake.namespacePathMutex.Lock()
	ret, specificReturn := fake.namespacePathReturnsOnCall[len(fake.namespacePathArgsForCall)]
	fake.namespacePathArgsForCall = append(fake.namespacePathArgsForCall, struct {
		logger lager.Logger
		path   string
	}{logger, path})
	fake.recordInvocation("NamespacePath", []interface{}{logger, path})
	fake.namespacePathMutex.Unlock()
	if fake.NamespacePathStub != nil {
		return fake.NamespacePathStub(logger, path)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.namespacePathReturns.result1
}

func (fake *FakeNamespacer) NamespacePathCallCount() int {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return len(fake.namespacePathArgsForCall)
}

func (fake *FakeNamespacer) NamespacePathArgsForCall(i int) (lager.Logger, string) {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return fake.namespacePathArgsForCall[i].logger, fake.namespacePathArgsForCall[i].path
}

func (fake *FakeNamespacer) NamespacePathReturns(result1 error) {
	fake.NamespacePathStub = nil
	fake.namespacePathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) NamespacePathReturnsOnCall(i int, result1 error) {
	fake.NamespacePathStub = nil
	if fake.namespacePathReturnsOnCall == nil {
		fake.namespacePathReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.namespacePathReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) NamespaceCommand(cmd *exec.Cmd) {
	fake.namespaceCommandMutex.Lock()
	fake.namespaceCommandArgsForCall = append(fake.namespaceCommandArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.recordInvocation("NamespaceCommand", []interface{}{cmd})
	fake.namespaceCommandMutex.Unlock()
	if fake.NamespaceCommandStub != nil {
		fake.NamespaceCommandStub(cmd)
	}
}

func (fake *FakeNamespacer) NamespaceCommandCallCount() int {
	fake.namespaceCommandMutex.RLock()
	defer fake.namespaceCommandMutex.RUnlock()
	return len(fake.namespaceCommandArgsForCall)
}

func (fake *FakeNamespacer) NamespaceCommandArgsForCall(i int) *exec.Cmd {
	fake.namespaceCommandMutex.RLock()
	defer fake.namespaceCommandMutex.RUnlock()
	return fake.namespaceCommandArgsForCall[i].cmd
}

func (fake *FakeNamespacer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	fake.namespaceCommandMutex.RLock()
	defer fake.namespaceCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNamespacer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uidgid.Namespacer = new(FakeNamespacer)
