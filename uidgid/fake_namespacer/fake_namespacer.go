// This file was generated by counterfeiter
package fake_namespacer

import (
	"os/exec"
	"sync"

	"github.com/concourse/baggageclaim/uidgid"
)

type FakeNamespacer struct {
	CacheKeyStub        func() string
	cacheKeyMutex       sync.RWMutex
	cacheKeyArgsForCall []struct{}
	cacheKeyReturns     struct {
		result1 string
	}
	NamespacePathStub        func(rootfsPath string) error
	namespacePathMutex       sync.RWMutex
	namespacePathArgsForCall []struct {
		rootfsPath string
	}
	namespacePathReturns struct {
		result1 error
	}
	NamespaceCommandStub        func(cmd *exec.Cmd)
	namespaceCommandMutex       sync.RWMutex
	namespaceCommandArgsForCall []struct {
		cmd *exec.Cmd
	}
}

func (fake *FakeNamespacer) CacheKey() string {
	fake.cacheKeyMutex.Lock()
	fake.cacheKeyArgsForCall = append(fake.cacheKeyArgsForCall, struct{}{})
	fake.cacheKeyMutex.Unlock()
	if fake.CacheKeyStub != nil {
		return fake.CacheKeyStub()
	} else {
		return fake.cacheKeyReturns.result1
	}
}

func (fake *FakeNamespacer) CacheKeyCallCount() int {
	fake.cacheKeyMutex.RLock()
	defer fake.cacheKeyMutex.RUnlock()
	return len(fake.cacheKeyArgsForCall)
}

func (fake *FakeNamespacer) CacheKeyReturns(result1 string) {
	fake.CacheKeyStub = nil
	fake.cacheKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNamespacer) NamespacePath(rootfsPath string) error {
	fake.namespacePathMutex.Lock()
	fake.namespacePathArgsForCall = append(fake.namespacePathArgsForCall, struct {
		rootfsPath string
	}{rootfsPath})
	fake.namespacePathMutex.Unlock()
	if fake.NamespacePathStub != nil {
		return fake.NamespacePathStub(rootfsPath)
	} else {
		return fake.namespacePathReturns.result1
	}
}

func (fake *FakeNamespacer) NamespacePathCallCount() int {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return len(fake.namespacePathArgsForCall)
}

func (fake *FakeNamespacer) NamespacePathArgsForCall(i int) string {
	fake.namespacePathMutex.RLock()
	defer fake.namespacePathMutex.RUnlock()
	return fake.namespacePathArgsForCall[i].rootfsPath
}

func (fake *FakeNamespacer) NamespacePathReturns(result1 error) {
	fake.NamespacePathStub = nil
	fake.namespacePathReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) NamespaceCommand(cmd *exec.Cmd) {
	fake.namespaceCommandMutex.Lock()
	fake.namespaceCommandArgsForCall = append(fake.namespaceCommandArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.namespaceCommandMutex.Unlock()
	if fake.NamespaceCommandStub != nil {
		fake.NamespaceCommandStub(cmd)
	}
}

func (fake *FakeNamespacer) NamespaceCommandCallCount() int {
	fake.namespaceCommandMutex.RLock()
	defer fake.namespaceCommandMutex.RUnlock()
	return len(fake.namespaceCommandArgsForCall)
}

func (fake *FakeNamespacer) NamespaceCommandArgsForCall(i int) *exec.Cmd {
	fake.namespaceCommandMutex.RLock()
	defer fake.namespaceCommandMutex.RUnlock()
	return fake.namespaceCommandArgsForCall[i].cmd
}

var _ uidgid.Namespacer = new(FakeNamespacer)
