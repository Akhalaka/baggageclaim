// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/concourse/baggageclaim/volume"
)

type FakeRepository struct {
	ListVolumesStub        func(queryProperties volume.Properties) (volume.Volumes, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct {
		queryProperties volume.Properties
	}
	listVolumesReturns struct {
		result1 volume.Volumes
		result2 error
	}
	CreateVolumeStub        func(strategy volume.Strategy, properties volume.Properties, ttl *uint) (volume.Volume, error)
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		strategy   volume.Strategy
		properties volume.Properties
		ttl        *uint
	}
	createVolumeReturns struct {
		result1 volume.Volume
		result2 error
	}
	DestroyVolumeStub        func(handle string) error
	destroyVolumeMutex       sync.RWMutex
	destroyVolumeArgsForCall []struct {
		handle string
	}
	destroyVolumeReturns struct {
		result1 error
	}
	SetPropertyStub        func(volumeGUID string, propertyName string, propertyValue string) error
	setPropertyMutex       sync.RWMutex
	setPropertyArgsForCall []struct {
		volumeGUID    string
		propertyName  string
		propertyValue string
	}
	setPropertyReturns struct {
		result1 error
	}
	TTLStub        func(volume.Volume) time.Duration
	tTLMutex       sync.RWMutex
	tTLArgsForCall []struct {
		arg1 volume.Volume
	}
	tTLReturns struct {
		result1 time.Duration
	}
}

func (fake *FakeRepository) ListVolumes(queryProperties volume.Properties) (volume.Volumes, error) {
	fake.listVolumesMutex.Lock()
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct {
		queryProperties volume.Properties
	}{queryProperties})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub(queryProperties)
	} else {
		return fake.listVolumesReturns.result1, fake.listVolumesReturns.result2
	}
}

func (fake *FakeRepository) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeRepository) ListVolumesArgsForCall(i int) volume.Properties {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return fake.listVolumesArgsForCall[i].queryProperties
}

func (fake *FakeRepository) ListVolumesReturns(result1 volume.Volumes, result2 error) {
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 volume.Volumes
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) CreateVolume(strategy volume.Strategy, properties volume.Properties, ttl *uint) (volume.Volume, error) {
	fake.createVolumeMutex.Lock()
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		strategy   volume.Strategy
		properties volume.Properties
		ttl        *uint
	}{strategy, properties, ttl})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(strategy, properties, ttl)
	} else {
		return fake.createVolumeReturns.result1, fake.createVolumeReturns.result2
	}
}

func (fake *FakeRepository) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeRepository) CreateVolumeArgsForCall(i int) (volume.Strategy, volume.Properties, *uint) {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return fake.createVolumeArgsForCall[i].strategy, fake.createVolumeArgsForCall[i].properties, fake.createVolumeArgsForCall[i].ttl
}

func (fake *FakeRepository) CreateVolumeReturns(result1 volume.Volume, result2 error) {
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 volume.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) DestroyVolume(handle string) error {
	fake.destroyVolumeMutex.Lock()
	fake.destroyVolumeArgsForCall = append(fake.destroyVolumeArgsForCall, struct {
		handle string
	}{handle})
	fake.destroyVolumeMutex.Unlock()
	if fake.DestroyVolumeStub != nil {
		return fake.DestroyVolumeStub(handle)
	} else {
		return fake.destroyVolumeReturns.result1
	}
}

func (fake *FakeRepository) DestroyVolumeCallCount() int {
	fake.destroyVolumeMutex.RLock()
	defer fake.destroyVolumeMutex.RUnlock()
	return len(fake.destroyVolumeArgsForCall)
}

func (fake *FakeRepository) DestroyVolumeArgsForCall(i int) string {
	fake.destroyVolumeMutex.RLock()
	defer fake.destroyVolumeMutex.RUnlock()
	return fake.destroyVolumeArgsForCall[i].handle
}

func (fake *FakeRepository) DestroyVolumeReturns(result1 error) {
	fake.DestroyVolumeStub = nil
	fake.destroyVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SetProperty(volumeGUID string, propertyName string, propertyValue string) error {
	fake.setPropertyMutex.Lock()
	fake.setPropertyArgsForCall = append(fake.setPropertyArgsForCall, struct {
		volumeGUID    string
		propertyName  string
		propertyValue string
	}{volumeGUID, propertyName, propertyValue})
	fake.setPropertyMutex.Unlock()
	if fake.SetPropertyStub != nil {
		return fake.SetPropertyStub(volumeGUID, propertyName, propertyValue)
	} else {
		return fake.setPropertyReturns.result1
	}
}

func (fake *FakeRepository) SetPropertyCallCount() int {
	fake.setPropertyMutex.RLock()
	defer fake.setPropertyMutex.RUnlock()
	return len(fake.setPropertyArgsForCall)
}

func (fake *FakeRepository) SetPropertyArgsForCall(i int) (string, string, string) {
	fake.setPropertyMutex.RLock()
	defer fake.setPropertyMutex.RUnlock()
	return fake.setPropertyArgsForCall[i].volumeGUID, fake.setPropertyArgsForCall[i].propertyName, fake.setPropertyArgsForCall[i].propertyValue
}

func (fake *FakeRepository) SetPropertyReturns(result1 error) {
	fake.SetPropertyStub = nil
	fake.setPropertyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) TTL(arg1 volume.Volume) time.Duration {
	fake.tTLMutex.Lock()
	fake.tTLArgsForCall = append(fake.tTLArgsForCall, struct {
		arg1 volume.Volume
	}{arg1})
	fake.tTLMutex.Unlock()
	if fake.TTLStub != nil {
		return fake.TTLStub(arg1)
	} else {
		return fake.tTLReturns.result1
	}
}

func (fake *FakeRepository) TTLCallCount() int {
	fake.tTLMutex.RLock()
	defer fake.tTLMutex.RUnlock()
	return len(fake.tTLArgsForCall)
}

func (fake *FakeRepository) TTLArgsForCall(i int) volume.Volume {
	fake.tTLMutex.RLock()
	defer fake.tTLMutex.RUnlock()
	return fake.tTLArgsForCall[i].arg1
}

func (fake *FakeRepository) TTLReturns(result1 time.Duration) {
	fake.TTLStub = nil
	fake.tTLReturns = struct {
		result1 time.Duration
	}{result1}
}

var _ volume.Repository = new(FakeRepository)
