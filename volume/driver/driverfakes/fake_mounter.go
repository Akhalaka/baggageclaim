// Code generated by counterfeiter. DO NOT EDIT.
package driverfakes

import (
	"sync"

	"github.com/concourse/baggageclaim/volume/driver"
)

type FakeMounter struct {
	BindMountStub        func(string) error
	bindMountMutex       sync.RWMutex
	bindMountArgsForCall []struct {
		arg1 string
	}
	bindMountReturns struct {
		result1 error
	}
	bindMountReturnsOnCall map[int]struct {
		result1 error
	}
	OverlayMountStub        func(string, string) error
	overlayMountMutex       sync.RWMutex
	overlayMountArgsForCall []struct {
		arg1 string
		arg2 string
	}
	overlayMountReturns struct {
		result1 error
	}
	overlayMountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounter) BindMount(arg1 string) error {
	fake.bindMountMutex.Lock()
	ret, specificReturn := fake.bindMountReturnsOnCall[len(fake.bindMountArgsForCall)]
	fake.bindMountArgsForCall = append(fake.bindMountArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BindMount", []interface{}{arg1})
	fake.bindMountMutex.Unlock()
	if fake.BindMountStub != nil {
		return fake.BindMountStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindMountReturns
	return fakeReturns.result1
}

func (fake *FakeMounter) BindMountCallCount() int {
	fake.bindMountMutex.RLock()
	defer fake.bindMountMutex.RUnlock()
	return len(fake.bindMountArgsForCall)
}

func (fake *FakeMounter) BindMountCalls(stub func(string) error) {
	fake.bindMountMutex.Lock()
	defer fake.bindMountMutex.Unlock()
	fake.BindMountStub = stub
}

func (fake *FakeMounter) BindMountArgsForCall(i int) string {
	fake.bindMountMutex.RLock()
	defer fake.bindMountMutex.RUnlock()
	argsForCall := fake.bindMountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMounter) BindMountReturns(result1 error) {
	fake.bindMountMutex.Lock()
	defer fake.bindMountMutex.Unlock()
	fake.BindMountStub = nil
	fake.bindMountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) BindMountReturnsOnCall(i int, result1 error) {
	fake.bindMountMutex.Lock()
	defer fake.bindMountMutex.Unlock()
	fake.BindMountStub = nil
	if fake.bindMountReturnsOnCall == nil {
		fake.bindMountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindMountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) OverlayMount(arg1 string, arg2 string) error {
	fake.overlayMountMutex.Lock()
	ret, specificReturn := fake.overlayMountReturnsOnCall[len(fake.overlayMountArgsForCall)]
	fake.overlayMountArgsForCall = append(fake.overlayMountArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("OverlayMount", []interface{}{arg1, arg2})
	fake.overlayMountMutex.Unlock()
	if fake.OverlayMountStub != nil {
		return fake.OverlayMountStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.overlayMountReturns
	return fakeReturns.result1
}

func (fake *FakeMounter) OverlayMountCallCount() int {
	fake.overlayMountMutex.RLock()
	defer fake.overlayMountMutex.RUnlock()
	return len(fake.overlayMountArgsForCall)
}

func (fake *FakeMounter) OverlayMountCalls(stub func(string, string) error) {
	fake.overlayMountMutex.Lock()
	defer fake.overlayMountMutex.Unlock()
	fake.OverlayMountStub = stub
}

func (fake *FakeMounter) OverlayMountArgsForCall(i int) (string, string) {
	fake.overlayMountMutex.RLock()
	defer fake.overlayMountMutex.RUnlock()
	argsForCall := fake.overlayMountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMounter) OverlayMountReturns(result1 error) {
	fake.overlayMountMutex.Lock()
	defer fake.overlayMountMutex.Unlock()
	fake.OverlayMountStub = nil
	fake.overlayMountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) OverlayMountReturnsOnCall(i int, result1 error) {
	fake.overlayMountMutex.Lock()
	defer fake.overlayMountMutex.Unlock()
	fake.OverlayMountStub = nil
	if fake.overlayMountReturnsOnCall == nil {
		fake.overlayMountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.overlayMountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindMountMutex.RLock()
	defer fake.bindMountMutex.RUnlock()
	fake.overlayMountMutex.RLock()
	defer fake.overlayMountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driver.Mounter = new(FakeMounter)
